---
title: Zen Mind, Google Intern's Mind
subtitle: Some notes about Go
date: 2024-03-27
layout: post
lang: en
tags: [golang, thoughts]
draft: true
---
#+OPTIONS: toc:nil num:nil
#+LANGUAGE: en

jorge started as a Go learning project, so I'll wrap up this development blog with my thoughts of the language. I should stress that these are first impressions more than truths or strong opinions, based in my experience of using it for about a month on small solo project. I had [[file:why][high expectations]] going in, and for the most part they were either confirmed or at least not disproven.

** modules / project layout
(leftover from getting started post)
- project structure seems unintuive
  - module, package, workspaces
  - at least based on the tutorials and googling, it's hard to make straightforward mapping to the notions I came from expect from other languages (roughly: project, package, module/file)
  - https://go.dev/doc/modules/managing-source
  - https://go.dev/doc/modules/layout

- modules are weird
  - different from other languages
  - module is actually kind of a project
  - files within a package share the namespace, kind of useless. makes me want to have a single file per package which then makes the file structure kind of redundant commands/command.go
  - the tutorial was throwing me off in this regard as well
  - havent even looked at gopath thingie
  - nor workspaces
  - one thing I do like a lot is that it forces you to qualify identifiers of imported stuff

https://groups.google.com/g/golang-nuts/c/tveOKkxNN1w
https://utcc.utoronto.ca/~cks/space/blog/programming/GoInstallLimitation
https://www.jvt.me/posts/2023/09/20/go-mod-fork-gotcha/

** error handling
- couldn't comment on Go without mentioning its controversial take on error handling
- example: copying a file from a source to a destination path


- the error thing is ludacris. again something I can get used to it (I've read rob pike thing and wasn't convinced at all by the argument; I read the comparison with python and I kind of buy it.
  - I'm all for explicitly handling errors, but the err != nil checks after each step are terrible for readability. I really miss the ? operator from rust in this case or some other dumb syntancit sugar to at least let me avoid the 3 line conditional after each operation that may fail
  - (I don't like at all to have to get "creative" to prevent the boilerplate)
  - maybe readability is not a priority here. (I'm questioning my deepest believes here, what if code is stable and easier to operate but not readable; is that something you'd be willing to accept?)

https://go.dev/blog/errors-are-values
https://medium.com/@shazow/code-boilerplate-is-it-always-bad-934827efcfc7

https://jesseduffield.com/Questionable-Questionmarks/

** expressiveness
- this is a 100% subjective quality. like easiness and unlike simplicity as per Rich Hickey descriptions
- when I talk about the expressiveness of a language I mean the distance it puts between a high level pseudocode of a task and the actual code that realizes it. (both in the diff between the pseudocode and the code, and the effort it takes to arrive there). ---how much it gets in the way.
  - in python it tends to be very short distance. So I would say that Python is very expressive.
  - Rust tends to be in the opposite end, in my experience. The code may be succint in the end, but I frequently had to struggle to get to it, even for mundante tasks like iterating and transforming data structures.
  - I would say that Go is somewhere in the middle. it's usually lot more code than python but not hard to get there, never getting stuck in simple stuff
  - I should note that a lot of expressiveness is not necessarily a good thing: case in point the error handling discussion above (it may be better not to focus only in the happy path)

- the file open routine above may again be a good example.
  - mental model: cp f1 f2

  - https://stackoverflow.com/questions/2032149/optional-parameters-in-go
  https://groups.google.com/g/golang-nuts/c/-5MCaivW0qQ
  - i kind of miss default arguments (not to mention pythons great kwargs args)
    - instance of "we get to do magic stuff in the language but don't allow to do the same for language users"
    - contributes to the idea of googles style guidelines and do as told dont ask why
    - simplicity over expressiveness

** dependencies

- batteries included but dumb data structures
  - things that should be methods are builtins or std package functions
  - apaprently common to resort to write common operations. maybe even more so in the past, judging by SO answers
  - I like the implications in terms of reduced dependencies
  - also like the API stability

- an example is with testing helpers
  - i like that the idiomatic thing is not to abuse dependencies and figure stuff out with stdlib
  - but I think it's just ridiculous that you don't even have an assert function in the stdlib
  - that, pairde with everything returning err would mean that mos tests would be 70% boilerplate
  - I saw a suggestion to code your own assert helpers, but seriously, that's hard to understand.

** philosophy / mindset

I went in expecting to find a boring language, in the good sense of the word [LINK].
this was true to the extent that go is an unpretentious language, it was designed to intentionally avoid unnecessary sophistication, it tries to be simpler<loose features> than the alternative of the time (c++, java)/
but it's not boring in the sense of always doing what you expect: it's not without its quirks and rough edges. It's simpler than Java and C++, yes, but I'm not sure it's necessarily a simple language [fn again, rich hickey]

<At its worst,> some of its design choices can feel arbitrary.

- some design decisions come across as arbitrary
  - seen a couple of "because the powers that be decided this at google / because google's C++ style guide demanded this"
  - "experience has shown that this is better" -> "experience /at google/ has shown that this is better /for google/" -> google style guide said so -> google says so.
  - reminded me a bit of PGs take on java, that the designers were designing for programmers dumber than them (example generics)
  - the counter argument to this is: I like a language that designed upfront to be "beginner friendly" as opposed to one that cops out about rough edges saying that this lanaguage is "for pros" (clj, cpp)
  - so you are forced to enter it with a humbling zen-like beginner's
    - zen mind: google intern's mind

  - I get the vibe that the narrative assume someone just starting willing to accept this is how it is, don't ask
- since I'm learning this language out of humility, trying to accomplish things without sophistication, I try to accept things as they come without fighting them or trying to ask much why.

- the fmt tool works as a good metaphor of the entire design, I suppose.
  - yes, perhaps someone could make a strong case why spaces are marginally better than tabs, but even if tabs are the wrong choice, the benefits of removing the question altogether far outweight that marginal loss.
  (that is, a language that makes as many decisions as possible for you will end up making you more productive even if those decisions are not the optimal for everyone)
  (go is not a language for power users. in this sense it stands in the extreme opposite to clojure that I've seen defined by some of its owners as a language for pros)
  (go is a beginner friendly language (which is absolutely a win in my books))
[a better version fo this last thoughts is in the notebook]

- engineering/industry informed language, in that regard it feels similar to erlang, and its a good thing
