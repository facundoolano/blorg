---
title: Zen Mind, Google Intern's Mind
subtitle: Notes about Go
date: 2024-04-02
layout: post
lang: en
tags: [golang, thoughts]
draft: true
excerpt: jorge started as a Go learning project so writing down my thoughts of the language seemed like a good way to wrap this devlog up.
---
#+OPTIONS: toc:nil num:nil
#+LANGUAGE: en

[[/][jorge]] started as a Go learning project so writing down my thoughts of the language seemed like a good way to wrap this devlog up.

I emphasize that these are first impressions more than truths or strong opinions, based in my experience of using it for about a month on a small solo project; I had [[file:why][high expectations]] going in, and for the most part they were either confirmed or at least not disproven[fn:6].

*** Modules
# TODO consider removing list of tutorials and put a single general link
I [[file:getting-started-with-go-and-emacs][started my tour]] by reading the first few tutorials in Go's website. Those showed me how to write a [[https://go.dev/doc/tutorial/getting-started.html][Hello World program]], how to develop [[https://go.dev/doc/tutorial/create-module.html][an application and a library]] in tandem, and how to work on [[https://go.dev/doc/tutorial/workspaces][multi-module workspaces]]. In hindsight, that wasn't the most efficient way to get started, since <those tutorials> pulled me in the direction of writing multiple modules at a time whereas I planned to work on a single binary project. The impression I got from <those tutorials> was that, perhaps for historical reasons, module management in Go is nuanced, at least when compared with other languages I'm familiar with.

The first thing I had to adjust to was that, in Go, a /module/ is more or less what I would call a /project/ in other languages. And what I would call a module elsewhere ---a namespace, typically contained in a single file--- didn't have an exact equivalent: each Go package is a collection of source files sharing a namespace.

One thing that Go nails down just right in this department, probably better than every other language I used, is forcing imported identifiers to be qualified by its package name. Qualified imports make code much more readable because you can always tell where identifiers come from, how much you depend on an external module, etc. And it lets you remove redundancy from names, so you can mix ~io.Reader~ with ~bufio.Reader~ and ~strings.Reader~, instead of ~bufio.BufferReader~ and ~strings.StringReader~. This is supported in other languages but not mandatory, or default, or even convenient[fn:4]. For similar reasons, I found it inconvenient that files within a package share a namespace, since it makes it less obvious where local identifiers are defined, when a namespace gets too large, etc. At first, the inertia I carried from other languages made me want to write single-file packages ---~site/site.go~, ~config/config.go~, ~templates/templates.go~, etc.--- which felt off.

*** Errors
I obviously have things to say about Go's controversial error handling.
As a recap: errors are values in Go so, instead raising exceptions, functions signal error conditions by returning extra values. Whereas in Python I would write:

#+begin_src python
try:
    f = open('file.text')
except OSError as err:
    print("something went wrong", err)
#+end_src

In Go I write:

#+begin_src go
file, err := os.Open(path)
if err != nil {
	fmt.Println("something went wrong", err)
}
#+end_src

Not that big of a difference. The problem is that, in Go, error-handling boilerplate (the ~if err != nil~ check) grows linearly with the amount of operations that can fail. As an example, here's a file copying function I had to introduce early in my project:

#+begin_src go
func copyFile(source string, target string) error {
	srcFile, err := os.Open(source)
	if err != nil {
		return err
	}
	defer srcFile.Close()

	targetFile, err := os.Create(target)
	if err != nil {
		return err
	}
	defer targetFile.Close()

	_, err = io.Copy(targetFile, srcFile)
	if err != nil {
		return err
	}

	return targetFile.Sync()
}
#+end_src

The code above doesn't want to do anything special with errors, just return them, and yet, more than half of the lines are for error handling. The equivalent Python function would get the same behavior without any error handling or, if I wanted it to be explicit, with a single ~try/except~ clause.

I think the rationale around languages with unchecked exceptions, like Python, is: 95% of the times you don't want to do local error manipulation, you just want to bubble errors up and handle them generically at a higher level. So they make that the default[fn:1]. Go's rationale, in turn, is: when programmers are not forced to handle errors explicitly, they only consider the happy path; 95% of the times they won't think hard enough about error conditions, maybe won't handle errors all, ultimately producing brittle software.

I think both views have their merit, and there's a trade-off to be made here. I had used Rust for some time before Go, so errors as values weren't new to me; I was already sold on the idea of handling them explicitly: I agree that it forces you to reason about failure scenarios instead of just the happy path. But Rust supports this concept with syntax short-hands for explicitly bubbling up errors, wrapping them in other errors, or unwrapping them into run-time checks. In the file copy example above, Rust's question mark operator would remove all the boilerplate while remaining explicit about error handling.

What's unconvincing about Go is that it doesn't provide much syntax support to deal with errors returns; you are almost always forced to do the check nil and return dance ---and this is in a language that does indulge in "special-case" syntax for convenience or to work around other limitations[fn:2]. The main problem is not having to type more[fn:7]: the proliferation of ~if err != nil~ checks hurts readability; when reading the code, sometimes /it is/ convenient to focus on the happy path to understand what the code is doing.

There's an [[https://go.dev/blog/errors-are-values][official article]] by Rob Pike that discusses this issue, saying that if  you find yourself typing ~err != nil~ over and over, you probably aren't trying hard enough. Then demonstrates some creative ways to reduce error-handling boilerplate.
In my very short experience, I've found that the code structure doesn't always leave room such creative refactors; that aside, I think something as mundane as error handling shouldn't need you to get creative at all. What's more, custom error checking code and clever APIs like the ~bufio.Scanner~ one mentioned in the article can too hurt readability or, worse, defeat the original purpose of forcing all errors to be checked explicitly.

[[https://medium.com/@shazow/code-boilerplate-is-it-always-bad-934827efcfc7][Another post]] argues that perhaps code boilerplate isn't that bad; that we can think of it as representing the "substance" of each operation. What I found thought-provoking of this argument was the idea that the terseness of Python code ---the /beautiful is better than ugly/ mantra--- could make us inclined to avoid introducing necessary boilerplate, for example error-handling boilerplate. That beautiful code can inadvertently become an end in itself. This left me thinking: what if the error-checking discipline buys a reliability that outweighs its readability cost? Who could tell which of the two has a bigger impact in software maintainability? How much of our strongest convictions are founded on gut feeling?

*** Expressiveness
The error handling discussion can be thought of a particular case of a broader one, that of language expressiveness. Expressiveness is a vaguely-defined and highly subjective quality[fn:5] but one that can be used to compare programming languages. I think about expressiveness as the distance the language puts between the abstract idea of a task ---in pseudocode, perhaps--- and its working implementation. I don't just mean distance in terms of lines of code ---how verbose the language is--- but the cognitive effort it takes to get there ---how much the language helps, how much it gets in the way.

- I find Python to be a highly expressive language. Perhaps because it's close to pseudocode, perhaps because I used it long enough that my mental pseudocode is close to Python. As seen in the error handling discussions, more expressive isn't necessarily better.
- Rust tends to be in the opposite end. Working code (or subsets of it) may be elegant and succinct, but arriving to it can be a struggle, even for mundane tasks like iterating and transforming data structures.
- I would say that Go is somewhere in between. It's verbose, sometimes even bureaucratic, and, while at the feature level it's a simple language, it's full of little syntax and design quirks. But, unlike Rust, I rarely found myself baffled, stuck at making a piece of code compile or struggling to make a design fit its programming model.

Go was designed to err on the side simplicity, in some cases removing choice from the programmer to prevent misuse, like a style-guide baked directly into the language. It leaves no room for enamoring yourself with an elegant piece of code, a pristine type family, or an overarching class hierarchy. One easy example of how this philosophy affects the language expressiveness, is the lack of function argument defaults[fn:8]:

#+begin_quote
Experience tells us that defaulted arguments make it too easy to patch over API design flaws by adding more arguments, resulting in too many arguments with interactions that are difficult to disentangle or even understand.
#+end_quote

And method overloading[fn:9]:

#+begin_quote
Experience with other languages told us that having a variety of methods with the same name but different signatures was occasionally useful but that it could also be confusing and fragile in practice.
#+end_quote

*** Dependencies
Expressiveness is also affected by how much you can get done with the built-ins and the standard library ---as opposed to writing utilities by yourself or relying on external dependencies. I found Go to be uneven in this front: on one hand, the standard library has several powerful of modules (http servers, templates, embedded files) that can get you a long way; on the other, many common data structure operations and utilities are missing so you have to write them yourself[fn:3].

There seems to be an inclination in Go's community to avoid external dependencies when possible. I think this a good convention, making software more reliable and maintainable, and it sets Go apart from the rest of the modern programming language[fn:10]. But paired with a non-comprehensive standard library,
it means more custom code for basic tasks.

Going back to the file copy example, my mental model for the operation was the shell command ~cp src dest~, which translates directly to Python's [[https://docs.python.org/3/library/shutil.html#shutil.copy][~shutil.copy~]] and to Rust's [[https://doc.rust-lang.org/std/fs/fn.copy.html][~std::fs::copy~]]. Since Go [[https://github.com/golang/go/issues/8868][doesn't provide]] such a function, you need to unfold that mental model into its lower-level operations and write the code to perform them yourself (or, more likely, copy it from a previous project or from StackOverflow, or ask ChatGPT).

I encountered a similar situation with unit testing helpers. Go has no built-in assertions for the [[https://go.dev/doc/faq#assertions][same reasons]] it doesn't have default arguments: they can be misused. There are no assertions in the testing utilities, either, because [[https://go.dev/doc/faq#testing_framework][allegedly]] plain Go should be enough. Unsurprisingly, I found that plain Go unit tests are plagued by unreadable error checking boilerplate. I saw people would either use a testing library or write their own assertion functions over and over. The latter seemed more in line with the no-dependencies convention so, after some trial and error, I ended with these helpers:

#+begin_src go
func assert(t *testing.T, cond bool) {
	t.Helper()
	if !cond {
		t.Fatalf("%v is false", cond)
	}
}

func assertEqual(t *testing.T, a interface{}, b interface{}) {
	t.Helper()
	if a != b {
		t.Fatalf("%v != %v", a, b)
	}
}
#+end_src


*** Mindset

I went into Go programming expecting to find a boring language ---in the [[https://mcfunley.com/choose-boring-technology][good sense]] of the word. And I found that, to the extent that Go is unpretentious, designed to avoid unnecessary sophistication (and its associated complexity). But Go is not boring in the sense of always doing what you would expect: it's not without its quirks and rough edges[fn:11]. At best it's simple; at worst, feature-poor. At best, pragmatic; at worst, inconsistent. At best, beginner-friendly; at worst, patronizing. At best, informed by real-world applications; at worst, tailor-made for Google's needs.

The ~gofmt~ tool works as a good metaphor of the language as a whole. Someone can probably make a strong case of why spaces are marginally better than tabs for indentation, but even if tabs were the wrong choice, the benefits of removing the question altogether far outweigh that marginal loss. The underlying principle: a language that makes as many decisions for programmers as possible, will make them more productive, regardless of whether the decisions are optimal.

I may not like some of its design choices, or how they are justified, but I see the merit in building a language to meet very specific goals, opting out of  fashionable features, and then sticking to that design over the years, resisting the temptation to "improve" on it ---that may well be Go's killer feature. And, while I disagree with the assumption that programmers need to be protected from themselves,
I do believe in the creative power of restrictions, in doing more with less, in approaching the work with a [[https://en.wikipedia.org/wiki/Shoshin][beginner's mind]].

** Notes
[fn:2] One obvious one is the "comma ok" idiom to check if a map contains an element. More closely related to error handling, there are special syntax rules to [[https://go.dev/doc/effective_go#redeclaration][redeclarate]] return values, and I presume the ~defer~ construct was introduced specifically to keep resource management sane in the context of frequent early returns.

[fn:1] One funny aspect of Python's take on errors is that it seems to work against its own philosophy: "explicit is better than implicit" and (to a lesser degree, since runtime crashes aren't precisely quiet) "errors should never pass silently".

[fn:4] In Python, for instance, I need to write ~import feedi.parsers.rss as rss~ to get a similar effect. And since it's not the default, external code was not necessarily written with this usage pattern in mind.

[fn:5] Following Rich Hickey's distinction between [[https://www.infoq.com/presentations/Simple-Made-Easy/][simple and easy]], expressiveness is more like the latter: somethings that's in the eye of the beholder, that you wouldn't use to justify a technical decision.

[fn:6] In previous posts, I already mentioned that it felt [[file:getting-started-with-go-and-emacs][easy to learn]] and that I was positively impressed by its [[file:a-site-server-with-live-reload][concurrency facilities]].

[fn:7] See [[https://jesseduffield.com/Gos-Shortcomings-1/][this post]] for a detailed discussion of the day-to-day annoyances of Go's approach to errors, from the perspective of the developer writing the code. The [[https://jesseduffield.com/Questionable-Questionmarks/][follow-up post]] explores the idea of extending Go with Rust's question mark operator.

[fn:8] [[https://go.dev/talks/2012/splash.article#TOC_10.][Go at Google: Language Design in the Service of Software Engineering]].

[fn:9] [[https://go.dev/doc/faq#overloading][Why does Go not support overloading of methods and operators?]]

[fn:10] See [[https://research.swtch.com/deps][Our Software Dependency Problem]] by Russ Cox, a core Go developer.

[fn:11] See the [[https://100go.co/chapter-1/][100 Go Mistakes book]] ("simple to learn but hard to master"), and the [[https://golang50shad.es/][50 Shades of Go]].
