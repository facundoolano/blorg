---
title: jorge build
subtitle: Prepare for production
layout: post
lang: en
tags: [tutorial]
---
#+OPTIONS: toc:nil num:nil
#+LANGUAGE: en

So far you've seen how to [[file:2-jorge-init][start a project]], [[file:3-jorge-serve][serve it locally]] and [[file:4-jorge-post][add some content]] to it. The last step is to prepare your site for the public, and ~jorge build~ will help you with that:

#+begin_src console
$ jorge build
skipping draft target/blog/my-own-blog-post.org
wrote target/2024-02-23-another-kind-of-post/index.html
wrote target/blog/goodbye-markdown/index.html
wrote target/assets/css/main.css
wrote target/blog/hello-org/index.html
wrote target/blog/tags/index.html
wrote target/index.html
wrote target/feed.xml
wrote target/blog/index.html
#+end_src

Just like ~jorge serve~ did before, ~jorge build~ scans your ~src/~ directory and renders its files into ~target/~, but with a few differences:

- Templates flagged as drafts in their front matter are excluded.
- Static files are copied over to ~target/~ instead of just linked.
- The ~url~ from your ~config.yml~ is used as the root when rendering absolute urls (instead of the ~http://localhost:4001~ used when serving locally).
- The HTML, XML, CSS and JavaScript files are minified.

After running ~jorge build~, the contents of the ~target/~ directory will be ready for a web server. There are many ways to publish a static site to the internet, and covering them all is out of the scope of this tutorial[fn:1]. I suggest going through the [[https://jekyllrb.com/docs/deployment/][Jekyll]] and [[https://gohugo.io/hosting-and-deployment/][Hugo]] docs for inspiration.

But for the sake of completeness, this is how this site is deployed: I have a VPS box running Debian Linux and with the [[https://www.nginx.com/][nginx]] server installed on it. I added this configuration to ~/etc/nginx/sites-enabled/jorge~:

#+begin_src nginx
  server {
          charset utf-8;
          root /var/www/jorge;
          server_name jorge.olano.dev;

          location / {
              # First attempt to serve request as file,
              # then as directory. Otherwise respond 404.
              try_files $uri $uri/ =404;
          }
  }

#+end_src

I instructed my DNS server to point ~jorge.olano.dev~ to the IP of the box and I ran [[https://certbot.eff.org/instructions?ws=nginx&os=debianbuster][certbot]] to generate certificates for that subdomain. I then created the ~/var/www/jorge~ directory in the server, and deployed from my laptop using ~rsync~:

#+begin_src console
$ jorge build
$ rsync -vPrz --delete target/ root@olano.dev:/var/www/jorge
#+end_src

And that's it!

*** Notes

[fn:1] [[https://github.com/facundoolano/jorge/pulls][PRs]] welcome!
